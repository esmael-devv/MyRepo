Problem Description
You are given a collection of intervals A in a 2-D array format, where each interval is represented by a pair of integers `[start, end]`. The intervals are sorted based on their start values.
Your task is to merge all overlapping intervals and return the resulting set of non-overlapping intervals.
Problem Constraints
1 <= len(A) <= 100000.
1 <= A[i][0] <= A[i][1] <= 100000
A is sorted based on the start value (A[i][0])
Input Format
First argument is a list of intervals in 2-Dimentional Array.
Output Format
Return the sorted list of intervals after merging all the overlapping intervals.
Example Input
Input 1:
[ [1, 3], [2, 6], [8, 10], [15, 18] ]
Input 2:
[ [2, 10], [4, 9], [6, 7] ]
Example Output
Output 1:
[ [1, 6], [8, 10], [15, 18] ]
Output 2:
[ [2, 10] ]

Solution:

public class Solution {
    public int[][] solve(int[][] A) {
        ArrayList<int[]> ans = new ArrayList<>();
        int currS = A[0][0];
        int currE = A[0][1];
        for(int i=0; i<A.length; i++){
            int newS = A[i][0];
            int newE = A[i][1];
            if(newS <= currE){
                currE = Math.max(currE, newE);
            }
            else{
                ans.add(new int[]{currS, currE});
                currS = newS;
                currE = newE;
            }
        }
        ans.add(new int[]{currS, currE});
        return ans.toArray(new int[ans.size()][]);

    }
}
