Problem Description

You are given an integer array A of length N.
You are also given a 2D integer array B with dimensions M x 2, where each row denotes a [L, R] query.
For each query, you have to find the sum of all elements from L to R indices in A (0 - indexed).
More formally, find A[L] + A[L + 1] + A[L + 2] +... + A[R - 1] + A[R] for each query.



Problem Constraints

1 <= N, M <= 105
1 <= A[i] <= 109
0 <= L <= R < N


Input Format

The first argument is the integer array A.
The second argument is the 2D integer array B.


Output Format

Return an integer array of length M where ith element is the answer for ith query in B.


Example Input

Input 1:


A = [1, 2, 3, 4, 5]
B = [[0, 3], [1, 2]]
Input 2:

A = [2, 2, 2]
B = [[0, 0], [1, 2]]




Example Output

Output 1:
[10, 5]
Output 2:
[2, 4]


Approach 1: timeCompexity is O(M*N)

public class Solution {
    public long[] rangeSum(int[] A, int[][] B) {
        long result[] = new long[B.length];
        for(int i=0; i<B.length; i++){
            
            int L = B[i][0];
            int R = B[i][1];
            long sum = 0;
            for(int j=L; j<=R; j++){
                sum = sum+A[j];
            }
            result[i] = sum;
        }
        return result;
    }
}



Approach 2: TimeComplexity O(NÂ²) + O(M)

public class Solution {
    public long[] rangeSum(int[] A, int[][] B) {
        long[] PFS = new long[A.length];
        for(int i=0; i<A.length; i++){
            int sum=0;
            for(int j=0; j<=i; j++){
                sum= sum+A[j];
            }
            PFS[i]=sum;
        }
        long[] result = new long[B.length];
        for(int i=0; i<B.length; i++) {
            int L = B[i][0];
            int R = B[i][1];
            if(L == 0) 
                result[i] = PFS[R];
            else 
                result[i] = PFS[R] - PFS[L-1];
        }
        return result;
    }
    
}

