Problem Description
There are A beggars sitting in a row outside a temple. Each beggar initially has an empty pot. When the devotees come to the temple, they donate some amount of coins to these beggars. Each devotee gives a fixed amount of coin(according to their faith and ability) to some K beggars sitting next to each other.
Given the amount P donated by each devotee to the beggars ranging from L to R index, where 1 <= L <= R <= A, find out the final amount of money in each beggar's pot at the end of the day, provided they don't fill their pots by any other means.
For ith devotee B[i][0] = L, B[i][1] = R, B[i][2] = P, given by the 2D array B
Problem Constraints
1 <= A <= 2 * 105
1 <= L <= R <= A
1 <= P <= 103
0 <= len(B) <= 105
Input Format
The first argument is a single integer A.
The second argument is a 2D integer array B.
Output Format
Return an array(0 based indexing) that stores the total number of coins in each beggars pot.
Example Input
Input 1:-
A = 5
B = [[1, 2, 10], [2, 3, 20], [2, 5, 25]]
Example Output
Output 1:-
10 55 45 25 25

Solution1: O(n*q)

public class Solution {
    public int[] solve(int A, int[][] B) {
        int[] arr =new int[A];
        for(int i=0; i<B.length;i++){
            for(int j=B[i][0]-1; j<=B[i][1]-1; j++){
                arr[j] += B[i][2];
            }
        }
        return arr;
    }
}




Solution2: O(n+q)

public class Solution {
    public int[] solve(int A, int[][] B) {
        int[] arr =new int[A];
        for(int i=0; i<B.length;i++){
            int start= B[i][0];
            int end = B[i][1];
            arr[start-1] += B[i][2];
            if(end<A){
                arr[end] -= B[i][2];
            }
        }
        for(int i=1; i<A; i++){
            arr[i] +=arr[i-1];
        }
        return arr;
    }
}
