Problem Description
Given an array A, find the size of the smallest subarray such that it contains at least one occurrence of the maximum value of the array
and at least one occurrence of the minimum value of the array.

Problem Constraints
1 <= |A| <= 2000
Input Format
First and only argument is vector A
Output Format
Return the length of the smallest subarray which has at least one occurrence of minimum and maximum element of the array
Example Input
Input 1:
A = [1, 3, 2]
Input 2:
A = [2, 6, 1, 6, 9]
Example Output
Output 1:
2
Output 2:
3

Solution:

public class Solution {
    public int solve(int[] A) {
        int maxV = Integer.MIN_VALUE;
        for(int i=0; i<A.length; i++){
            if(A[i]>maxV){
                maxV = A[i];
            }
        }
        int minV = Integer.MAX_VALUE;
        for(int j=0; j<A.length; j++){
            if(A[j]<minV){
                minV = A[j];
            }
        }
        if(maxV == minV){
            return 1;
        }
        int ans = A.length;
        int max_index = -1;
        int min_index = -1;
        for(int k=0; k<A.length; k++){
            if(A[k] == maxV){
                max_index = k;
                if(min_index!= -1){
                    ans = Math.min(ans, Math.abs(max_index - min_index) + 1);
                }
            }
            else if(A[k] == minV){
                min_index = k;
                if(max_index != -1){
                    ans = Math.min(ans, Math.abs(min_index - max_index +1));
                }
            }
        }
        return ans;
    }
}
